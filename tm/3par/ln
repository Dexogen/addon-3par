#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2018, FeldHost (feldhost.net)                                    #
#                                                                            #
# Portions copyright 2014-2016, Laurent Grawet <dev@grawet.be>               #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

###############################################################################
# This script is used to link the image from the datastore (persistent images)
###############################################################################

# ln fe:SOURCE host:remote_system_ds/disk.i vmid dsid
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

# ------------ Set up the environment to source common tools ------------

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

. $TMCOMMON

DRIVER_PATH=$(dirname $0)

source ${DRIVER_PATH}/../../etc/datastore/3par/3par.conf
. ${DRIVER_PATH}/../../datastore/3par/scripts_3par.sh

# -------- Get ln and datastore arguments from OpenNebula core ------------

SRC=$1
DST=$2

VMID=$3
DSID=$4

#-------------------------------------------------------------------------------
# Set dst path and dir
#-------------------------------------------------------------------------------

NAME=$(get_vv_name "$SRC")
WWN=$(get_vv_wwn "$SRC")

DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`
DST_DIR=`dirname $DST_PATH`

#-------------------------------------------------------------------------------
# Start actions
#-------------------------------------------------------------------------------

log "Mapping $SRC to $DST_HOST"

LUN=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py exportVV -a $API_ENDPOINT -i $IP -u $USERNAME -p $PASSWORD \
                                                                -n $NAME -hs $DST_HOST)

if [ $? -ne 0 ]; then
  error_message "$LUN"
  exit 1
fi

DISCOVER_CMD=$(cat <<EOF
    set -e
    mkdir -p "$DST_DIR"
    $(rescan_scsi_bus "$LUN")
    $(multipath_rescan)

    DEV="/dev/mapper/nonexistent"

    # Wait a bit for new mapping
    COUNTER=1
    while [ ! -e \$DEV ] && [ \$COUNTER -le 10 ]; do
        DEV="/dev/mapper/\`$SUDO cat /etc/multipath/bindings | grep "3$WWN" | $AWK '{print \$1}'\`"
        sleep 1
        COUNTER=\$((\$COUNTER + 1))
    done
    if [ ! -e \$DEV ]; then
        # Last chance to get our mapping
        $(multipath_rescan)
        COUNTER=1
        while [ ! -e "$DEV" ] && [ \$COUNTER -le 10 ]; do
            DEV="/dev/mapper/\`$SUDO cat /etc/multipath/bindings | grep "3$WWN" | $AWK '{print \$1}'\`"
            sleep 1
            COUNTER=\$((\$COUNTER + 1))
        done
    fi
    # Exit with error if mapping does not exist
    if [ ! -e \$DEV ]; then
        exit 1
    fi
    
    DM_HOLDER=\$($BASENAME \`$READLINK \$DEV\`)
    DM_SLAVE=\$(ls /sys/block/\${DM_HOLDER}/slaves)
    # Wait a bit for mapping's paths
    COUNTER=1
    while [ ! "\${DM_SLAVE}" ] && [ \$COUNTER -le 10 ]; do
        sleep 1
        COUNTER=\$((\$COUNTER + 1))
    done
    # Exit with error if mapping has no path
    if [ ! "\${DM_SLAVE}" ]; then
        exit 1
    fi
    ln -sf "\$DEV" "$DST_PATH"
EOF
)

ssh_exec_and_log "$DST_HOST" "$DISCOVER_CMD" \
    "Error registering $SRC to $DST_HOST"

exit 0